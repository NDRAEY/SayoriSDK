// -*- C++ -*-

#pragma once

extern "C" {
	#include "../../libc/include/memory.h"
}

namespace std {
	template<typename T>
	class vector {
	public:
	    vector() {
		size = 0;
		capacity = 1;

		container = calloc(capacity, 1);
	    }

	    ~vector() {
		free(container);
	    }

	    void Append(const T& element) {
		if(size + 1 >= capacity) {
		    capacity = capacity == 0 ? 1 : 2 * capacity;

		    container = (T*)realloc(container, capacity * sizeof(T));
		}

		container[size] = element;

		size++;
	    }

	    void Remove(int index) {
		for (size_t i = index; i < size - 1; ++i) {
		    container[i] = container[i + 1];
		}

		--size;
	    }

	    bool Empty() {
		return size == 0;
	    }

	    size_t Size() {
		return size;
	    }

	    T* Raw() {
		return container;
	    }

	    T* begin() {
		return container;
	    }

	    T* end() {
		return container + size;
	    }

	    T& operator[](size_t index) {
		if(index >= size) {
			// TODO: Panic here
			return *end();
		}

		return container[index];
	    }

	private:
	    T* container;
	    size_t size;
	    size_t capacity;
	};
}
