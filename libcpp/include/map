// -*- C++ -*-

#include "utility"
#include "vector"

using namespace std;
//extern "C" void printf(const char* a, ...);

namespace std {
	template <typename KeyType, typename ValueType>
	class map {
	public:
		typedef pair<KeyType, ValueType> PairElement;

		map() = default;
		~map() = default;

		ValueType& operator[](const KeyType& key) {
			for(auto& i : _table) {
				if(i.first == key) {
					return i.second;
				}
			}

			// If element does not exist, create new default pair.
			_table.push_back(pair {key, ValueType{}});
			
			return _table.back().second;
		}

		PairElement* find(const KeyType& key) {
			for(PairElement* elem = begin(); elem != end(); elem++) {
				if(elem->first == key) {
					return elem;
				}
			}

			return end();
		}

		void clear() {
			_table.clear();
		}

		PairElement* begin() {
			return _table.begin();
		}

		PairElement* end() {
			return _table.end();
		}

	private:
		vector<PairElement> _table;
	};
}


